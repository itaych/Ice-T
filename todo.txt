ice-t
-----
Rush: 1. Why is it still slow? 2. Why do some codes (clear screen?) still show on the screen?
	3. What prevents "Rush" from being displayed during menus? 4. At chkrsh?ok there are calls that
	also call buffdo - could cause infinite recursion? 5. Cursor glitches.

xmodem upload: stray character displayed when returning to terminal? very rare and hard to catch.

colors:
	Fill new (cleared) lines with background color. Prob. only new lines that scroll in.

more colors: https://invisible-island.net/xterm/ctlseqs/ctlseqs.html - search "(SGR)".
38;5, 38;2, and add a private 38;9 to allow atari colors (or 48..).
38;5 is explained at: https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
https://syncterm.bbsdev.net/cterm.html#_csi_ps_m_select_graphic_rendition_sgr
https://www.telnetbbsguide.com/bbs/total-lost/

private extensions: ( http://vt100.net/emu/ctrlseq_dec.html )
	Esc [ cmd ; arg1 ; .. ; argn / t          or, old idea was: Esc [ 99 ; cmd ; arg1 ; .. ; argn {

	- cmd=1: vdelay * arg1 (mod 32)
	- cmd=2: enable Atari color values. arg1=0 (default) foreground, 1=background (spaces/new lines too). arg2=color or absent for no color (use whatever color is already set). Esc [ 0 m (reset) or setting any ANSI color or bold disables.
	- cmd=3: n1;c1;c2;c3;c4;c5 [;n2;c1;c2;c3;c4;c5].. set all 5 colors for horizontal lines. row=0 means all rows. colors are even values, or: absent = no change; 1=repeat prev valid value (will be 0 if there was none).
	- cmd=4: force scroll down color table by arg1 lines (1-24).
	- cmd=5: force scroll up color table by arg1 lines (1-24).
	- cmd=6: horizontal move colors left (for lines within scroll region)
	- cmd=7: horizontal move colors right (for lines within scroll region)
	- cmd=20: set(1)/unset(0 or blank) scroll lock for color background.
	- cmd=21: set/unset rotate for vertical scroll (if set new line will get colors of scrolled out line)
	- cmd=22: set/unset rotate for horizontal scroll

don't forget to generate new icet.dat for release!

known issues (prob. wontfix)
double width does not support 8-bit chars.
digraph characters are not correctly stored in text mirror, so may change when redrawing.
areas containing nothing but the checkerboard character may be considered blank by insert/delete char routines.
no proper detection of online status.

.loadsym C:\Emulators\Atari\ATasm\Projects\Ice-T\bin\icet.lab
e address byte (write memory)
? expr

add to inittab or equivalent:
dt:12345:respawn:/sbin/agetty -L ttyS0 9600 vt100

or just: sudo /sbin/agetty -L ttyS0 9600 vt100

col80:
------
hang/garbage when moving up
try to name unnamed labels/variables

.loadsym C:\Emulators\Atari\ATasm\Projects\Ice-T\Build\col80.lab
0d 0a
cr lf

113 cycles per line in altirra's debugger.
twilight.vt:
view file: 30 seconds.
alpha 7: 57 seconds.
current: 47 seconds.
extreme (rely on altirra's buffer, disable some jsr's): 27 seconds.
hopefully altirra will fix status result?

--
atdi 192.168.1.242 23
atdi bbs.eotd.com
atdi lord.stabs.org
atdi atarinews.org
C:\Users\Itay\Emulators\Atari\ATasm\Projects\Ice-T\utils\TCP2Con>tcp2con plink.exe -ssh itayc@192.168.1.242
atdi 127.0.0.1 9001
--
LDA NUM1L ; a common technique for comparing two 16-bit numbers
CMP NUM2L
LDA NUM1H
SBC NUM2H
--
This code converts a hex digit 0 to F (i.e. the accumulator $00 to $0F) to $30 to $39 (for 0 to 9) and $41 to $46 (for A to F).

     CMP #$0A
     BCC SKIP
     ADC #$66 ; Add $67 (the carry is set), convert $0A to $0F --> $71 to $76
SKIP EOR #$30 ; Convert $00 to $09, $71 to $76 --> $30 to $39, $41 to $46
--
lda v1
cmp v2
bcc ---> v1<v2
bcs ---> v1>=v2
--
# delete last commit, keep changes locally
git reset HEAD~1
git push -f # origin <branch>
--
regexp for finding trailing whitespaces: [ \t]+$
